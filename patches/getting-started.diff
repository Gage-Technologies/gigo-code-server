Modify Help: Getting Started

This modifies some text on the Getting Started page and adds text about using
code-server on a team.

It is enabled by default but can be overriden using the cli flag
`--disable-getting-started-override`.

Index: code-server/lib/vscode/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts
===================================================================
--- code-server.orig/lib/vscode/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts
+++ code-server/lib/vscode/src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts
@@ -3,20 +3,17 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { $, Dimension, addDisposableListener, append, clearNode, reset } from 'vs/base/browser/dom';
+import { $, Dimension, addDisposableListener, append, clearNode, reset, prepend } from 'vs/base/browser/dom';
 import { renderFormattedText } from 'vs/base/browser/formattedTextRenderer';
 import { StandardKeyboardEvent } from 'vs/base/browser/keyboardEvent';
 import { Button } from 'vs/base/browser/ui/button/button';
 import { renderLabelWithIcons } from 'vs/base/browser/ui/iconLabel/iconLabels';
 import { DomScrollableElement } from 'vs/base/browser/ui/scrollbar/scrollableElement';
-import { Toggle } from 'vs/base/browser/ui/toggle/toggle';
 import { coalesce, equals } from 'vs/base/common/arrays';
 import { Delayer, Throttler } from 'vs/base/common/async';
 import { CancellationToken } from 'vs/base/common/cancellation';
 import { Codicon } from 'vs/base/common/codicons';
-import { onUnexpectedError } from 'vs/base/common/errors';
 import { KeyCode } from 'vs/base/common/keyCodes';
-import { splitRecentLabel } from 'vs/base/common/labels';
 import { DisposableStore, toDisposable } from 'vs/base/common/lifecycle';
 import { ILink, LinkedText } from 'vs/base/common/linkedText';
 import { parse } from 'vs/base/common/marshalling';
@@ -38,7 +35,7 @@ import { IEditorOptions } from 'vs/platf
 import { IFileService } from 'vs/platform/files/common/files';
 import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
 import { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';
-import { ILabelService, Verbosity } from 'vs/platform/label/common/label';
+import { ILabelService } from 'vs/platform/label/common/label';
 import { INotificationService } from 'vs/platform/notification/common/notification';
 import { Link } from 'vs/platform/opener/browser/link';
 import { IOpenerService } from 'vs/platform/opener/common/opener';
@@ -47,10 +44,9 @@ import { IQuickInputService } from 'vs/p
 import { IStorageService, StorageScope, StorageTarget, WillSaveStateReason } from 'vs/platform/storage/common/storage';
 import { ITelemetryService, TelemetryLevel, firstSessionDateStorageKey } from 'vs/platform/telemetry/common/telemetry';
 import { getTelemetryLevel } from 'vs/platform/telemetry/common/telemetryUtils';
-import { defaultButtonStyles, defaultToggleStyles } from 'vs/platform/theme/browser/defaultStyles';
-import { IWindowOpenable } from 'vs/platform/window/common/window';
+import { defaultButtonStyles } from 'vs/platform/theme/browser/defaultStyles';
 import { IWorkspaceContextService, UNKNOWN_EMPTY_WINDOW_WORKSPACE } from 'vs/platform/workspace/common/workspace';
-import { IRecentFolder, IRecentWorkspace, IRecentlyOpened, IWorkspacesService, isRecentFolder, isRecentWorkspace } from 'vs/platform/workspaces/common/workspaces';
+import { IRecentFolder, IRecentWorkspace, IWorkspacesService } from 'vs/platform/workspaces/common/workspaces';
 import { OpenRecentAction } from 'vs/workbench/browser/actions/windowActions';
 import { OpenFileFolderAction, OpenFolderAction, OpenFolderViaWorkspaceAction } from 'vs/workbench/browser/actions/workspaceActions';
 import { EditorPane } from 'vs/workbench/browser/parts/editor/editorPane';
@@ -71,7 +67,6 @@ import { IWorkbenchThemeService } from '
 import { GettingStartedIndexList } from './gettingStartedList';
 
 const SLIDE_TRANSITION_TIME_MS = 250;
-const configurationKey = 'workbench.startupEditor';
 
 export const allWalkthroughsHiddenContext = new RawContextKey<boolean>('allWalkthroughsHidden', false);
 export const inWelcomeContext = new RawContextKey<boolean>('inWelcome', false);
@@ -127,7 +122,6 @@ export class GettingStartedPage extends
 
 	// Ensure that the these are initialized before use.
 	// Currently initialized before use in buildCategoriesSlide and scrollToCategory
-	private recentlyOpened!: Promise<IRecentlyOpened>;
 	private gettingStartedCategories!: IResolvedWalkthrough[];
 
 	private currentWalkthrough: IResolvedWalkthrough | undefined;
@@ -180,7 +174,9 @@ export class GettingStartedPage extends
 		@IEditorGroupsService private readonly groupsService: IEditorGroupsService,
 		@IContextKeyService contextService: IContextKeyService,
 		@IQuickInputService private quickInputService: IQuickInputService,
+		// @ts-ignore
 		@IWorkspacesService private readonly workspacesService: IWorkspacesService,
+		// @ts-ignore
 		@ILabelService private readonly labelService: ILabelService,
 		@IHostService private readonly hostService: IHostService,
 		@IWebviewService private readonly webviewService: IWebviewService,
@@ -230,9 +226,7 @@ export class GettingStartedPage extends
 		this._register(this.gettingStartedService.onDidAddWalkthrough(rerender));
 		this._register(this.gettingStartedService.onDidRemoveWalkthrough(rerender));
 
-		this.recentlyOpened = this.workspacesService.getRecentlyOpened();
 		this._register(workspacesService.onDidChangeRecentlyOpened(() => {
-			this.recentlyOpened = workspacesService.getRecentlyOpened();
 			rerender();
 		}));
 
@@ -770,52 +764,223 @@ export class GettingStartedPage extends
 	}
 
 	private async buildCategoriesSlide() {
-
 		this.categoriesSlideDisposables.clear();
-		const showOnStartupCheckbox = new Toggle({
-			icon: Codicon.check,
-			actionClassName: 'getting-started-checkbox',
-			isChecked: this.configurationService.getValue(configurationKey) === 'welcomePage',
-			title: localize('checkboxTitle', "When checked, this page will be shown on startup."),
-			...defaultToggleStyles
-		});
-		showOnStartupCheckbox.domNode.id = 'showOnStartup';
-		const showOnStartupLabel = $('label.caption', { for: 'showOnStartup' }, localize('welcomePage.showOnStartup', "Show welcome page on startup"));
-		const onShowOnStartupChanged = () => {
-			if (showOnStartupCheckbox.checked) {
-				this.telemetryService.publicLog2<GettingStartedActionEvent, GettingStartedActionClassification>('gettingStarted.ActionExecuted', { command: 'showOnStartupChecked', argument: undefined, walkthroughId: this.currentWalkthrough?.id });
-				this.configurationService.updateValue(configurationKey, 'welcomePage');
-			} else {
-				this.telemetryService.publicLog2<GettingStartedActionEvent, GettingStartedActionClassification>('gettingStarted.ActionExecuted', { command: 'showOnStartupUnchecked', argument: undefined, walkthroughId: this.currentWalkthrough?.id });
-				this.configurationService.updateValue(configurationKey, 'none');
-			}
-		};
-		this.categoriesSlideDisposables.add(showOnStartupCheckbox);
-		this.categoriesSlideDisposables.add(showOnStartupCheckbox.onChange(() => {
-			onShowOnStartupChanged();
-		}));
-		this.categoriesSlideDisposables.add(addDisposableListener(showOnStartupLabel, 'click', () => {
-			showOnStartupCheckbox.checked = !showOnStartupCheckbox.checked;
-			onShowOnStartupChanged();
-		}));
-
+		
 		const header = $('.header', {},
-			$('h1.product-name.caption', {}, this.productService.nameLong),
-			$('p.subtitle.description', {}, localize({ key: 'gettingStarted.editingEvolved', comment: ['Shown as subtitle on the Welcome page.'] }, "Editing evolved"))
+			$('h1.product-name.caption', {}, "GIGO DevSpace"),
+			$('p.subtitle.description', {}, localize({ key: 'gettingStarted.editingEvolved', comment: ['Shown as subtitle on the Welcome page.'] }, "Learn By Creating"))
+		);
+
+		let nextStepsGigo: HTMLElement = $('.header', {});
+		nextStepsGigo = $('.codeTeacherPlugCategory', {},
+				$('h2', {
+					style: 'margin-bottom: 12px',
+				}, 'Need Some Help'),
+									$('button', {
+						style: [
+							'padding: 10px 16px	',
+							'border-radius: 4px',
+							'background: linear-gradient(94.04deg, #29C18C 0%, #3D8EF7 101.2%)',
+							'color: white',
+							'overflow: hidden',
+							'margin-right: 14px',
+						].join(';'),
+						onclick: () => this.commandService.executeCommand("codeTeacher.startChat")
+					},
+					$('h3', {
+						style: [
+							'margin: 0px 0px 6px',
+							'font-weight: 500',
+						].join(';'),
+					}, 'Use Code Teacher as a personal tutor!'),
+					$('p', {
+						style: [
+							'margin: 0',
+							'font-size: 13px',
+							'color: #dcdee2',
+						].join(';'),
+					}, 'Code Teacher is an AI tutor system built to provide personalized help for every developer. Code Teacher can help you with errors, explain concepts, and help you on your journey to becoming a better developer.'),
+					$('p', {
+						style: [
+							'margin: 0',
+							'margin-top: 8px',
+							'font-size: 13px',
+							'display: flex',
+							'align-items: center',
+						].join(';'),
+					}, 'Get started ', $('span', {
+						class: ThemeIcon.asClassName(Codicon.arrowRight),
+						style: [
+							'color: white',
+							'margin-left: 8px',
+						].join(';'),
+					})),
+					$('img', {
+						src: './_static/src/browser/media/code-teacher.png',
+						style: [
+							'margin-bottom: -65px',
+'max-height: 300px',
+							'width: 100%',
+							'border-radius: 4px',
+							'object-fit: cover',
+							'object-position: top',
+							'margin-top: 10px',
+						].join(';'),
+					}),
+					),
+				);
+
+		let introToGigo: HTMLElement = $('.header', {});
+		introToGigo = $('.gigoIntroCategory', {},
+			$('h2', {
+				style: 'margin-bottom: 12px',
+			}, 'Let\'s Get Started'),
+			$('div', {},
+				$('p', {
+					style: [
+						'font-size: 18px',
+						'line-height: 1.3',
+						'margin-top: 0'
+					].join(';')
+				}, 'This is your DevSpace, it is a virtual environment in the cloud! You can use your DevSpace to complete interactive coding tutorials and work on Challenges. Let\'s learn about some of the tools in your DevSpace!'),
+				$('p', {
+					style: [
+						'font-size: 18px',
+						'line-height: 1.3',
+						'margin-top: 5px'
+					].join(';')
+				}, 'Use the activity bar on the left to navigate between different parts of your DevSpace. Click on any item below to explore more.'),
+				$('ul', {
+					style: [
+						'margin-top: 5px',
+					].join(';')
+				},
+					$('li', {},
+						$('p', {
+							style: [
+								'font-size: 14px',
+							].join(';')
+						}, 'Browse and manage your files and folders within your DevSpace.'),
+						$('button', {
+							style: [
+								'border-radius: 4px'
+							].join(';'),
+							onclick: () => this.commandService.executeCommand("workbench.view.explorer")
+						},
+							$('img', {
+								src: './_static/src/browser/media/vscode-icon-file-explorer.png',
+								style: 'height: 32px; width: 32px; vertical-align: middle; margin-right: 8px; border-radius: 4px;'
+							}),
+							$('span', {}, 'File Explorer'),
+						),
+					),
+					$('li', {},
+						$('p', {
+							style: [
+								'font-size: 14px',
+							].join(';')
+						}, 'Quickly find files, folders, and other items within your DevSpace.'),
+						$('button', {
+							style: [
+								'border-radius: 4px'
+							].join(';'),
+							onclick: () => this.commandService.executeCommand("workbench.action.findInFiles")
+						},
+							$('img', {
+								src: './_static/src/browser/media/vscode-icon-search.png',
+								style: 'height: 32px; width: 32px; vertical-align: middle; margin-right: 8px; border-radius: 4px;'
+							}),
+							$('span', {}, 'Search'),
+						),
+					),
+					$('li', {},
+						$('p', {
+							style: [
+								'font-size: 14px',
+							].join(';')
+						}, 'Open the GIGO tutorial for your project. All Interactive Challenges should have a tutorial but only some other Challenegs do.'),
+						$('button', {
+							style: [
+								'border-radius: 4px'
+							].join(';'),
+							onclick: () => this.commandService.executeCommand("gigo.tutorialView.focus")
+						},
+							$('img', {
+								src: './_static/src/browser/media/vscode-icon-tutorial.png',
+								style: 'height: 32px; width: 32px; vertical-align: middle; margin-right: 8px; border-radius: 4px;'
+							}),
+							$('span', {}, 'Challenge Tutorial'),
+						),
+					),
+					$('li', {},
+						$('p', {
+							style: [
+								'font-size: 14px',
+							].join(';')
+						}, 'Use the AFK feature to preserve your DevSpace for up to 1 hour of inactivity.'),
+						$('button', {
+							style: [
+								'border-radius: 4px'
+							].join(';'),
+							onclick: () => this.commandService.executeCommand("gigo.afkView.focus")
+						},
+							$('img', {
+								src: './_static/src/browser/media/vscode-icon-afk.png',
+								style: 'height: 32px; width: 32px; vertical-align: middle; margin-right: 8px; border-radius: 4px;'
+							}),
+							$('span', {}, 'AFK'),
+						),
+					),
+					$('li', {},
+						$('p', {
+							style: [
+								'font-size: 14px',
+							].join(';')
+						}, 'View your current streak status and your week\'s review.'),
+						$('button', {
+							style: [
+								'border-radius: 4px'
+							].join(';'),
+							onclick: () => this.commandService.executeCommand("gigo.streakView.focus")
+						},
+							$('img', {
+								src: './_static/src/browser/media/vscode-icon-streak.png',
+								style: 'height: 32px; width: 32px; vertical-align: middle; margin-right: 8px; border-radius: 4px;'
+							}),
+							$('span', {}, 'Streak'),
+						),
+					),
+					$('li', {},
+						$('p', {
+							style: [
+								'font-size: 14px',
+							].join(';')
+						}, 'Need some help? Code Teacher is your personal AI tutor!'),
+						$('button', {
+							style: [
+								'border-radius: 4px'
+							].join(';'),
+							onclick: () => this.commandService.executeCommand("codeTeacher.startChat")
+						},
+							$('img', {
+								src: './_static/src/browser/media/vscode-icon-code-teacher.png',
+								style: 'height: 32px; width: 32px; vertical-align: middle; margin-right: 8px; border-radius: 4px;'
+							}),
+							$('span', {}, 'Code Teacher'),
+						),
+					),
+				)
+			)
 		);
 
 		const leftColumn = $('.categories-column.categories-column-left', {},);
 		const rightColumn = $('.categories-column.categories-column-right', {},);
 
 		const startList = this.buildStartList();
-		const recentList = this.buildRecentlyOpenedList();
+
 		const gettingStartedList = this.buildGettingStartedWalkthroughsList();
 
-		const footer = $('.footer', {},
-			$('p.showOnStartup', {},
-				showOnStartupCheckbox.domNode,
-				showOnStartupLabel,
-			));
+		const footer = $('.footer', {});
 
 		const layoutLists = () => {
 			if (gettingStartedList.itemCount) {
@@ -831,14 +996,11 @@ export class GettingStartedPage extends
 		};
 
 		const layoutRecentList = () => {
-			if (this.container.classList.contains('noWalkthroughs')) {
-				recentList.setLimit(10);
+			if (this.container.classList.contains('noWalkthroughs') && this.container.classList.contains('noVideos')) {
 				reset(leftColumn, startList.getDomElement());
-				reset(rightColumn, recentList.getDomElement());
-			} else {
-				recentList.setLimit(5);
-				reset(leftColumn, startList.getDomElement(), recentList.getDomElement());
 			}
+			prepend(leftColumn, introToGigo)
+			prepend(rightColumn, nextStepsGigo)
 		};
 
 		gettingStartedList.onDidChange(layoutLists);
@@ -895,87 +1057,6 @@ export class GettingStartedPage extends
 		this.setSlide('categories');
 	}
 
-	private buildRecentlyOpenedList(): GettingStartedIndexList<RecentEntry> {
-		const renderRecent = (recent: RecentEntry) => {
-			let fullPath: string;
-			let windowOpenable: IWindowOpenable;
-			if (isRecentFolder(recent)) {
-				windowOpenable = { folderUri: recent.folderUri };
-				fullPath = recent.label || this.labelService.getWorkspaceLabel(recent.folderUri, { verbose: Verbosity.LONG });
-			} else {
-				fullPath = recent.label || this.labelService.getWorkspaceLabel(recent.workspace, { verbose: Verbosity.LONG });
-				windowOpenable = { workspaceUri: recent.workspace.configPath };
-			}
-
-			const { name, parentPath } = splitRecentLabel(fullPath);
-
-			const li = $('li');
-			const link = $('button.button-link');
-
-			link.innerText = name;
-			link.title = fullPath;
-			link.setAttribute('aria-label', localize('welcomePage.openFolderWithPath', "Open folder {0} with path {1}", name, parentPath));
-			link.addEventListener('click', e => {
-				this.telemetryService.publicLog2<GettingStartedActionEvent, GettingStartedActionClassification>('gettingStarted.ActionExecuted', { command: 'openRecent', argument: undefined, walkthroughId: this.currentWalkthrough?.id });
-				this.hostService.openWindow([windowOpenable], {
-					forceNewWindow: e.ctrlKey || e.metaKey,
-					remoteAuthority: recent.remoteAuthority || null // local window if remoteAuthority is not set or can not be deducted from the openable
-				});
-				e.preventDefault();
-				e.stopPropagation();
-			});
-			li.appendChild(link);
-
-			const span = $('span');
-			span.classList.add('path');
-			span.classList.add('detail');
-			span.innerText = parentPath;
-			span.title = fullPath;
-			li.appendChild(span);
-
-			return li;
-		};
-
-		if (this.recentlyOpenedList) { this.recentlyOpenedList.dispose(); }
-
-		const recentlyOpenedList = this.recentlyOpenedList = new GettingStartedIndexList(
-			{
-				title: localize('recent', "Recent"),
-				klass: 'recently-opened',
-				limit: 5,
-				empty: $('.empty-recent', {},
-					localize('noRecents', "You have no recent folders,"),
-					$('button.button-link', { 'x-dispatch': 'openFolder' }, localize('openFolder', "open a folder")),
-					localize('toStart', "to start.")),
-
-				more: $('.more', {},
-					$('button.button-link',
-						{
-							'x-dispatch': 'showMoreRecents',
-							title: localize('show more recents', "Show All Recent Folders {0}", this.getKeybindingLabel(OpenRecentAction.ID))
-						}, localize('showAll', "More..."))),
-				renderElement: renderRecent,
-				contextService: this.contextService
-			});
-
-		recentlyOpenedList.onDidChange(() => this.registerDispatchListeners());
-		this.recentlyOpened.then(({ workspaces }) => {
-			// Filter out the current workspace
-			const workspacesWithID = workspaces
-				.filter(recent => !this.workspaceContextService.isCurrentWorkspace(isRecentWorkspace(recent) ? recent.workspace : recent.folderUri))
-				.map(recent => ({ ...recent, id: isRecentWorkspace(recent) ? recent.workspace.id : recent.folderUri.toString() }));
-
-			const updateEntries = () => {
-				recentlyOpenedList.setEntries(workspacesWithID);
-			};
-
-			updateEntries();
-			recentlyOpenedList.register(this.labelService.onDidChangeFormatters(() => updateEntries()));
-		}).catch(onUnexpectedError);
-
-		return recentlyOpenedList;
-	}
-
 	private buildStartList(): GettingStartedIndexList<IWelcomePageStartEntry> {
 		const renderStartEntry = (entry: IWelcomePageStartEntry): HTMLElement =>
 			$('li',
Index: code-server/lib/vscode/src/vs/workbench/contrib/welcomeGettingStarted/browser/media/gettingStarted.css
===================================================================
--- code-server.orig/lib/vscode/src/vs/workbench/contrib/welcomeGettingStarted/browser/media/gettingStarted.css
+++ code-server/lib/vscode/src/vs/workbench/contrib/welcomeGettingStarted/browser/media/gettingStarted.css
@@ -60,6 +60,15 @@
 	display: block;
 }
 
+.monaco-workbench .part.editor > .content .gettingStartedContainer .coder {
+	margin-bottom: 0.2em;
+}
+
+.monaco-workbench .part.editor > .content .gettingStartedContainer .coder-coder {
+	font-size: 1em;
+	margin-top: 0.2em;
+}
+
 .monaco-workbench.hc-black .part.editor > .content .gettingStartedContainer .subtitle,
 .monaco-workbench.hc-light .part.editor > .content .gettingStartedContainer .subtitle {
 	font-weight: 200;
Index: code-server/lib/vscode/src/vs/workbench/browser/web.api.ts
===================================================================
--- code-server.orig/lib/vscode/src/vs/workbench/browser/web.api.ts
+++ code-server/lib/vscode/src/vs/workbench/browser/web.api.ts
@@ -313,6 +313,11 @@ export interface IWorkbenchConstructionO
 	 */
 	readonly isEnabledFileUploads?: boolean
 
+	/**
+	 * Whether to use Coder's custom Getting Started text.
+	 */
+	readonly isEnabledCoderGettingStarted?: boolean
+
 	//#endregion
 
 	//#region Profile options
Index: code-server/lib/vscode/src/vs/workbench/services/environment/browser/environmentService.ts
===================================================================
--- code-server.orig/lib/vscode/src/vs/workbench/services/environment/browser/environmentService.ts
+++ code-server/lib/vscode/src/vs/workbench/services/environment/browser/environmentService.ts
@@ -44,6 +44,11 @@ export interface IBrowserWorkbenchEnviro
 	readonly isEnabledFileUploads?: boolean;
 
 	/**
+	 * Enable Coder's custom getting started text.
+	 */
+	readonly isEnabledCoderGettingStarted?: boolean;
+
+	/**
 	 * Gets whether a resolver extension is expected for the environment.
 	 */
 	readonly expectsResolverExtension: boolean;
@@ -135,6 +140,13 @@ export class BrowserWorkbenchEnvironment
 		return this.options.isEnabledFileUploads;
 	}
 
+	get isEnabledCoderGettingStarted(): boolean {
+		if (typeof this.options.isEnabledCoderGettingStarted === "undefined") {
+			throw new Error('isEnabledCoderGettingStarted was not provided to the browser');
+		}
+		return this.options.isEnabledCoderGettingStarted;
+	}
+
 	@memoize
 	get argvResource(): URI { return joinPath(this.userRoamingDataHome, 'argv.json'); }
 
Index: code-server/lib/vscode/src/vs/server/node/serverEnvironmentService.ts
===================================================================
--- code-server.orig/lib/vscode/src/vs/server/node/serverEnvironmentService.ts
+++ code-server/lib/vscode/src/vs/server/node/serverEnvironmentService.ts
@@ -19,6 +19,7 @@ export const serverOptions: OptionDescri
 	'disable-file-downloads': { type: 'boolean' },
 	'disable-file-uploads': { type: 'boolean' },
 	'locale': { type: 'string' },
+	'disable-getting-started-override': { type: 'boolean' },
 
 	/* ----- server setup ----- */
 
@@ -105,6 +106,7 @@ export interface ServerParsedArgs {
 	'disable-file-downloads'?: boolean;
 	'disable-file-uploads'?: boolean;
 	'locale'?: string
+	'disable-getting-started-override'?: boolean,
 
 	/* ----- server setup ----- */
 
Index: code-server/lib/vscode/src/vs/server/node/webClientServer.ts
===================================================================
--- code-server.orig/lib/vscode/src/vs/server/node/webClientServer.ts
+++ code-server/lib/vscode/src/vs/server/node/webClientServer.ts
@@ -339,6 +339,7 @@ export class WebClientServer {
 			userDataPath: this._environmentService.userDataPath,
 			isEnabledFileDownloads: !this._environmentService.args['disable-file-downloads'],
 			isEnabledFileUploads: !this._environmentService.args['disable-file-uploads'],
+			isEnabledCoderGettingStarted: !this._environmentService.args['disable-getting-started-override'],
 			_wrapWebWorkerExtHostInIframe,
 			developmentOptions: { enableSmokeTestDriver: this._environmentService.args['enable-smoke-test-driver'] ? true : undefined, logLevel: this._logService.getLevel() },
 			settingsSyncOptions: !this._environmentService.isBuilt && this._environmentService.args['enable-sync'] ? { enabled: true } : undefined,
Index: code-server/lib/vscode/src/vs/workbench/browser/contextkeys.ts
===================================================================
--- code-server.orig/lib/vscode/src/vs/workbench/browser/contextkeys.ts
+++ code-server/lib/vscode/src/vs/workbench/browser/contextkeys.ts
@@ -7,7 +7,7 @@ import { Event } from 'vs/base/common/ev
 import { Disposable } from 'vs/base/common/lifecycle';
 import { IContextKeyService, IContextKey, setConstant as setConstantContextKey } from 'vs/platform/contextkey/common/contextkey';
 import { InputFocusedContext, IsMacContext, IsLinuxContext, IsWindowsContext, IsWebContext, IsMacNativeContext, IsDevelopmentContext, IsIOSContext, ProductQualityContext, IsMobileContext } from 'vs/platform/contextkey/common/contextkeys';
-import { SplitEditorsVertically, InEditorZenModeContext, AuxiliaryBarVisibleContext, SideBarVisibleContext, PanelAlignmentContext, PanelMaximizedContext, PanelVisibleContext, EmbedderIdentifierContext, EditorTabsVisibleContext, IsMainEditorCenteredLayoutContext, MainEditorAreaVisibleContext, DirtyWorkingCopiesContext, EmptyWorkspaceSupportContext, EnterMultiRootWorkspaceSupportContext, HasWebFileSystemAccess, IsMainWindowFullscreenContext, OpenFolderWorkspaceSupportContext, RemoteNameContext, VirtualWorkspaceContext, WorkbenchStateContext, WorkspaceFolderCountContext, PanelPositionContext, TemporaryWorkspaceContext, TitleBarVisibleContext, TitleBarStyleContext, IsAuxiliaryWindowFocusedContext, ActiveEditorGroupEmptyContext, ActiveEditorGroupIndexContext, ActiveEditorGroupLastContext, ActiveEditorGroupLockedContext, MultipleEditorGroupsContext, EditorsVisibleContext, IsEnabledFileDownloads, IsEnabledFileUploads } from 'vs/workbench/common/contextkeys';
+import { SplitEditorsVertically, InEditorZenModeContext, AuxiliaryBarVisibleContext, SideBarVisibleContext, PanelAlignmentContext, PanelMaximizedContext, PanelVisibleContext, EmbedderIdentifierContext, EditorTabsVisibleContext, IsMainEditorCenteredLayoutContext, MainEditorAreaVisibleContext, DirtyWorkingCopiesContext, EmptyWorkspaceSupportContext, EnterMultiRootWorkspaceSupportContext, HasWebFileSystemAccess, IsMainWindowFullscreenContext, OpenFolderWorkspaceSupportContext, RemoteNameContext, VirtualWorkspaceContext, WorkbenchStateContext, WorkspaceFolderCountContext, PanelPositionContext, TemporaryWorkspaceContext, TitleBarVisibleContext, TitleBarStyleContext, IsAuxiliaryWindowFocusedContext, ActiveEditorGroupEmptyContext, ActiveEditorGroupIndexContext, ActiveEditorGroupLastContext, ActiveEditorGroupLockedContext, MultipleEditorGroupsContext, EditorsVisibleContext, IsEnabledFileDownloads, IsEnabledFileUploads, IsEnabledCoderGettingStarted, } from 'vs/workbench/common/contextkeys';
 import { trackFocus, addDisposableListener, EventType, onDidRegisterWindow, getActiveWindow } from 'vs/base/browser/dom';
 import { preferredSideBySideGroupDirection, GroupDirection, IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';
 import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
@@ -200,6 +200,7 @@ export class WorkbenchContextKeysHandler
 		// code-server
 		IsEnabledFileDownloads.bindTo(this.contextKeyService).set(this.environmentService.isEnabledFileDownloads ?? true)
 		IsEnabledFileUploads.bindTo(this.contextKeyService).set(this.environmentService.isEnabledFileUploads ?? true)
+		IsEnabledCoderGettingStarted.bindTo(this.contextKeyService).set(this.environmentService.isEnabledCoderGettingStarted ?? true)
 
 		this.registerListeners();
 	}
Index: code-server/lib/vscode/src/vs/workbench/common/contextkeys.ts
===================================================================
--- code-server.orig/lib/vscode/src/vs/workbench/common/contextkeys.ts
+++ code-server/lib/vscode/src/vs/workbench/common/contextkeys.ts
@@ -42,6 +42,7 @@ export const EmbedderIdentifierContext =
 
 export const IsEnabledFileDownloads = new RawContextKey<boolean>('isEnabledFileDownloads', true, true);
 export const IsEnabledFileUploads = new RawContextKey<boolean>('isEnabledFileUploads', true, true);
+export const IsEnabledCoderGettingStarted = new RawContextKey<boolean>('isEnabledCoderGettingStarted', true, true);
 
 //#endregion
 
